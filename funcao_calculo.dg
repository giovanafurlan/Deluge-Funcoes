//orcamentoId = 5068590000001033619;
orcamento = zoho.crm.getRecordById("Quotes",orcamentoId.toLong());
contaId = orcamento.get("Account_Name").get("id");
conta = zoho.crm.getRecordById("Accounts",contaId);
canalPorcentagem = {"Varejo":2,"Atacarejo":0,"Distribuidor":-6,"Food Service":-2};
canal = conta.get("Canal");
icms = ifnull(conta.get("ICMS"),0);
frete = ifnull(conta.get("Frete"),0);
canalValor = 0;
ufEntrega = conta.get("UF_Entrega");
porcentagem369 = toNumber(ifnull(conta.get("field"),0));
if(porcentagem369 > 0 && porcentagem369 <= 3)
{
	porcentagem369 = 3;
}
else if(porcentagem369 > 3 && porcentagem369 <= 6)
{
	porcentagem369 = 6;
}
else if(porcentagem369 > 6 && porcentagem369 <= 9)
{
	porcentagem369 = 9;
}
for each  canalKey in canalPorcentagem.keys()
{
	if(canalKey == canal)
	{
		canalValor = canalPorcentagem.getJson(canal);
	}
}
response = invokeurl
[
	url :"https://www.zohoapis.com/crm/v2.1/Quotes/" + orcamentoId
	type :GET
	connection:"zcrm"
];
//info response;
if(response.size() > 0)
{
	QuotedItemsUpdate = list();
	Quoted_Items = response.getJson("data").get(0).getJson("Quoted_Items");
	msg = null;
	for each  quoteItem in Quoted_Items
	{
		mapQuotedItems = Map();
		produtoId = quoteItem.get("Product_Name").get("id");
		produtoInfo = zoho.crm.getRecordById("Products",produtoId);
		precoCaixa = produtoInfo.get("Pre_o_caixa");
		precoKilo = produtoInfo.get("Unit_Price");
		//fluxo caixa
		//netTotalPrecoCaixa = 0;
		netTotalPrecoKilo = 0;
		if(canalValor != 0)
		{
			//netTotalPrecoCaixa = netTotalPrecoCaixa + round(canalValor * precoCaixa / 100,1);
			netTotalPrecoKilo = netTotalPrecoKilo + round(canalValor * precoKilo / 100,1);
		}
		//precoBaseCaixa = netTotalPrecoCaixa + precoCaixa;
		precoBaseKilo = netTotalPrecoKilo + precoKilo;
		//
		//netTotalPrecoCaixa = precoBaseCaixa;
		netTotalPrecoKilo = precoBaseKilo;
		if(porcentagem369 != 0)
		{
			//netTotalPrecoCaixa = round(precoBaseCaixa / (1 - 1 / 100 * porcentagem369),1);
			netTotalPrecoKilo = round(precoBaseKilo / (1 - 1 / 100 * porcentagem369),1);
		}
		if(icms != 0)
		{
			//netTotalPrecoCaixa = round(precoBaseCaixa / (1 - 1 / 100 * icms),1);
			netTotalPrecoKilo = round(precoBaseKilo / (1 - 1 / 100 * icms),1);
		}
		//netTotalPrecoCaixa = netTotalPrecoCaixa + frete;
		netTotalPrecoKilo = netTotalPrecoKilo + frete;
		//lógica ST
		responseST = invokeurl
		[
			url :"https://www.zohoapis.com/crm/v2/functions/calculost/actions/execute?auth_type=apikey&zapikey=1003.8c62fe07091936b78682a6b243d89fd2.3c26e5921bb87954e33f828290d57ff6&uf=" + ufEntrega + "&produtoId=" + produtoId
			type :GET
		];
		valorComST = 0;
		valorST = 0;
		responseST = responseST.getJson("details").getJson("userMessage").get(0);
		if(responseST.get("success"))
		{
			valorST = responseST.get("data").get("valorST");
			//netTotalPrecoCaixa = round(netTotalPrecoCaixa,1) + valorST;
			netTotalPrecoKilo = round(netTotalPrecoKilo,1) + valorST;
		}
		//Preço CX: preço final (ICMS+Frete+Contrato+ST) multiplicado por qtd de cx digitada pelo usuário
		//netTotalPrecoCaixa = netTotalPrecoCaixa * qtdCaixa;
		//Preço KG: preço final (ICMS+Frete+Contrato+ST) para kg
		kiloPorCaixa = produtoInfo.get("Peso_caixaa");
		qtdCaixa = quoteItem.get("Qnt_Caixas");
		qtdKilo = quoteItem.get("Qnt_Kg");
		fluxoCaixa = if(qtdCaixa > 0 && qtdCaixa != null && qtdKilo == null,true,false);
		fluxoKilo = if(qtdKilo > 0 && qtdKilo != null && qtdCaixa == null,true,false);
		if(fluxoCaixa)
		{
			netTotalPrecoKilo = kiloPorCaixa * qtdCaixa * netTotalPrecoKilo;
			netTotalPrecoKilo = round(netTotalPrecoKilo,1);
			mapQuotedItems.put("Qnt_Caixas",qtdCaixa);
			mapQuotedItems.put("Qnt_Kg",kiloPorCaixa * qtdCaixa);
			mapQuotedItems.put("Pre_o_Unit_rio",netTotalPrecoKilo);
		}
		else if(fluxoKilo || qtdCaixa == 0)
		{
			tempQtdCaixa = (qtdKilo / kiloPorCaixa).floor();
			if(tempQtdCaixa <= 0)
			{
				//error
				msg = if(msg == null,"Peso CX inválido! Nome Produto: " + quoteItem.get("Product_Name").get("name"),msg + ", " + quoteItem.get("Product_Name").get("name"));
				mapQuotedItems.put("Qnt_Caixas",0);
				mapQuotedItems.put("Qnt_Kg",qtdKilo);
				mapQuotedItems.put("Pre_o_Unit_rio",0);
			}
			else if(tempQtdCaixa > 0)
			{
				netTotalPrecoKilo = kiloPorCaixa * tempQtdCaixa * netTotalPrecoKilo;
				netTotalPrecoKilo = round(netTotalPrecoKilo,1);
				mapQuotedItems.put("Qnt_Caixas",tempQtdCaixa);
				mapQuotedItems.put("Qnt_Kg",kiloPorCaixa * tempQtdCaixa);
				mapQuotedItems.put("Pre_o_Unit_rio",netTotalPrecoKilo);
			}
		}
		else
		{
			mapQuotedItems.put("Qnt_Caixas",qtdCaixa);
			mapQuotedItems.put("Qnt_Kg",qtdKilo);
			mapQuotedItems.put("Pre_o_Unit_rio",quoteItem.get("Pre_o_Unit_rio"));
		}
		//monta item orçamento
		mapQuotedItems.put("Product_Name",quoteItem.get("Product_Name"));
		//mapQuotedItems.put("Pre_o_caixa",netTotalPrecoCaixa);
		//mapQuotedItems.put("Total1",quoteItem.get("Total1"));
		mapQuotedItems.put("Discount",quoteItem.get("Discount"));
		mapQuotedItems.put("Description",quoteItem.get("Description"));
		QuotedItemsUpdate.add(mapQuotedItems);
	}
}
//update item cotação
data1 = Map();
data1.put("id",orcamentoId);
data1.put("Quoted_Items",QuotedItemsUpdate);
data1.put("ICMS",icms);
data1.put("Frete1",frete);
data1.put("Canal1",canalValor);
data1.put("Contrato",porcentagem369);
dataList = List();
dataList.add(data1);
param = Map();
param.put("data",dataList);
responseUpdateOrcamento = invokeurl
[
	url :"https://www.zohoapis.com/crm/v2.1/Quotes"
	type :PUT
	parameters:param.toString()
	connection:"zcrm"
];
info responseUpdateOrcamento;
//atualiza montante de negócio
if(orcamento.get("Deal_Name") != null)
{
	dealId = orcamento.get("Deal_Name").get("id");
	//zoho.crm.updateRecord("Deals",dealId,{"Amount":totalGeral});
}
//info responseUpdateOrcamento;
if(msg != null)
{
	return msg;
}
else
{
	return "Tabela de Preço gerada com sucesso!";
}